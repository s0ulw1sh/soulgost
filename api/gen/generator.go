package gen

import (
	"os"
	"fmt"
	"strings"
	"go/ast"
	"github.com/s0ulw1sh/soulgost/hash"
)

type apiGenerator struct {
	apitypes map[string]*apitype
}

type apitype struct {
	typename  string
	usemiddle bool
	funcs []apifunc
}

func (self *apitype) start_func() string {
	return "func (self *"+self.typename+") "
}

type apifunc struct {
	name     string
	command  string
	typename string
	apihash  uint32
	ft       *ast.FuncType
	inparam   apiparam
	outparam  apiparam
}

type apiparam struct {
	name   string
	gotype string
}

func (self *apiGenerator) checkDecls(root *ast.File) bool {
	var (
		fd  *ast.FuncDecl
		se  *ast.StarExpr
		id  *ast.Ident
		rt  *ast.Ident
		ok  bool
		hw  bool
		cmd string
		tn  string
	)

	for _, d := range root.Decls {
		if fd, ok = d.(*ast.FuncDecl); !ok || fd.Recv == nil || len(fd.Recv.List) != 1 { continue }
		if se, ok = fd.Recv.List[0].Type.(*ast.StarExpr); !ok { continue }
		if id, ok = se.X.(*ast.Ident); !ok { continue }
		if fd.Type.Results == nil || len(fd.Type.Results.List) != 1 { continue }
		if rt, ok = fd.Type.Results.List[0].Type.(*ast.Ident); !ok || rt.Name != "error" { continue }
		if !strings.HasPrefix(fd.Name.Name, "Api") { continue }

		tn = id.Name

		if _, ok = self.apitypes[tn]; !ok {
			self.apitypes[tn] = &apitype{
				typename: tn,
			}
		}

		if fd.Name.Name == "ApiMiddleware" {
			if el, ok := self.apitypes[tn]; ok {
				el.usemiddle = true
			}

			continue
		}

		cmd = strings.ToLower(strings.TrimPrefix(fd.Name.Name, "Api"))

		auf := apifunc{
			name:     fd.Name.Name,
			command:  cmd,
			typename: tn,
			apihash:  hash.MurMur2([]byte(cmd)),
			ft:       fd.Type,
		}

		hw = true

		i := 0

		if fd.Type.Params != nil {
			for _, l := range fd.Type.Params.List {
				tname := ""

				switch t := l.Type.(type) {

				case *ast.SelectorExpr:
					if xdn, ok := t.X.(*ast.Ident); ok {
						tname = xdn.Name + "." + t.Sel.Name
					}

				case *ast.StarExpr:
					switch x := t.X.(type) {
					case *ast.SelectorExpr:
						if xdn, ok := x.X.(*ast.Ident); ok {
							tname = xdn.Name + "." + x.Sel.Name
						}
					case *ast.Ident:
						tname = x.Name
					}
				}

				if len(tname) == 0 {
					break
				}

				if i == 0 {
					if tname != "api.Request" { break }
					i += 1
					continue
				}

				for _, n := range l.Names {

					if i == 1 {
						auf.inparam.name   = n.Name
						auf.inparam.gotype = tname
					}

					if i == 2 {
						auf.outparam.name   = n.Name
						auf.outparam.gotype = tname
					}

					i += 1
				}
			}
		}

		if el, ok := self.apitypes[tn]; ok && i == 3 {
			el.funcs = append(el.funcs, auf)
		}
	}

	return hw
}

func (self *apiGenerator) genApiCaller(fw *os.File, t *apitype) {
	fw.WriteString(t.start_func() + "CallApi(method string, req api.Request, res api.Response) (err error) {\n\t")

	fw.WriteString("switch hash.MurMur2([]byte(method)) {\n\t")
	
	for _, fn := range t.funcs {
		fw.WriteString(fmt.Sprintf("case %d:\n\t\t", fn.apihash))
		fw.WriteString("var par_in " + fn.inparam.gotype + "\n\t\t")
		fw.WriteString("var par_out " + fn.outparam.gotype + "\n\t\t")

		if t.usemiddle {
			fw.WriteString("if err = self.ApiMiddleware(method, req, res); err != nil { return res.WriteResult(nil, err) }\n\t\t")
		}

		fw.WriteString("if err = req.Params(&par_in); err != nil { return res.WriteResult(nil, err) }\n\t\t")
		fw.WriteString("if err = self." + fn.name + "(req, &par_in, &par_out); err != nil { return res.WriteResult(nil, err) }\n\t\t")
		fw.WriteString("return res.WriteResult(&par_out, nil)\n\t")
	}

	fw.WriteString("default:\n\t\t")
	fw.WriteString("return res.WriteResult(nil, \"method not found\")\n\t")
	fw.WriteString("}\n\t")
	
	fw.WriteString("return nil\n")
	fw.WriteString("}")
}

func Generate(root *ast.File, f *os.File) bool {
	gen := apiGenerator{}

	gen.apitypes = make(map[string]*apitype)

	if !gen.checkDecls(root) {
		return false
	}

	f.WriteString("package " + root.Name.Name + "\n\n")
	f.WriteString("//-soulgost\n\n")
	f.WriteString("// WARNING!!! \n")
	f.WriteString("// Code generated by \"soulgost -modes=api\"; DO NOT EDIT!\n")
	f.WriteString("// URL - https://github.com/s0ulw1sh/soulgost\n")
	f.WriteString("// by Pavel Rid aka s0ulw1sh\n\n")

	f.WriteString("import (\n")
	f.WriteString("\t\"github.com/s0ulw1sh/soulgost/hash\"\n")
	f.WriteString("\t\"github.com/s0ulw1sh/soulgost/api\"\n")
	f.WriteString(")\n\n")

	for _, t := range gen.apitypes {
		gen.genApiCaller(f, t)
	}

	return true
}