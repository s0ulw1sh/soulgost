package main

import (
	"os"
	"fmt"
	"log"
	"flag"
	"strings"
	"bufio"
	"io/ioutil"
	"path/filepath"

	"github.com/s0ulw1sh/soulgost/db/gen"
)

var (
	modes    = flag.String("modes", "", "operating modes; db")
	output   = flag.String("output", "", "output file name; default <srcdir>/<file>_sgen.go")

	dbgen    = false
)

func Usage() {
	fmt.Fprintf(os.Stderr, "Usage of soulgost:\n")
	fmt.Fprintf(os.Stderr, "Flags:\n")
	flag.PrintDefaults()
}

func isDirectory(name string) bool {
	info, err := os.Stat(name)
	if err != nil {
		log.Fatal(err)
	}
	return info.IsDir()
}

func runGenerators(file_path string) {
	filebytes, err := ioutil.ReadFile(file_path)

	if err != nil {
		log.Fatal(err)
	}

	processing := false
	data := ""

	scanner := bufio.NewScanner(strings.NewReader(string(filebytes)))

	for scanner.Scan() {
		l := scanner.Text()
		if strings.Contains(l, "+build exclude") {
			data += "// Code generated by \"soulgost -modes="+*modes+"\"; DO NOT EDIT!!!\n\n"
			processing = true
			continue
		}

		if strings.Contains(l, "go:generate") {
			continue
		}
		
		data += l + "\n"
	}

	if processing {

		if dbgen {
			log.Println("processing db", file_path)
			
			data, err = gen.Generate(filepath.Base(file_path), data)
			
			if err != nil {
				log.Fatal(err)
			}
		}

		fp := ""

		if *output != "" {
			fp = *output
		} else {
			fp = strings.TrimSuffix(filepath.Base(file_path), ".go")
			fp = fp + "_sgen.go"
		}

		outpath := filepath.Join(filepath.Dir(file_path), fp)

		ioutil.WriteFile(outpath, []byte(data), 0644)
	}
}

func main() {
	log.SetFlags(0)
	log.SetPrefix("soulgost: ")
	flag.Usage = Usage
	flag.Parse()

	args := flag.Args()

	if len(args) == 0 {
		args = []string{"."}
	}

	modesList := strings.Split(*modes, ",")

	if len(modesList) == 0 {
		return
	}

	for _, m := range modesList {
		if strings.ToLower(m) == "db" {
			dbgen = true
		}
	}

	if isDirectory(args[0]) {
		files, err := ioutil.ReadDir(args[0])

		if err != nil {
			log.Fatal(err)
		}

		for _, file := range files {

			if !file.IsDir() {
				if strings.HasSuffix(file.Name(), ".go") {
					fp := filepath.Join(args[0], file.Name())
					runGenerators(fp)
				}
			}

		}
	} else {
		runGenerators(args[0])
	}
}